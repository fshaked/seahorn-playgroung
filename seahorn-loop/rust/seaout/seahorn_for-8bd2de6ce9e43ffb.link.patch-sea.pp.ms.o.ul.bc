; ModuleID = 'seaout/test/seahorn_for-8bd2de6ce9e43ffb.link.patch-sea.pp.ms.o.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY17h78d791bf10915891E = internal constant <{ i8*, [0 x i8] }> <{ i8* bitcast (void (i32, i8**, i8**)* @_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY12init_wrapper17hac2c035213cf4e54E.stub to i8*), [0 x i8] zeroinitializer }>, section ".init_array.00099", align 8
@llvm.used = appending global [5 x i8*] [i8* bitcast (<{ i8*, [0 x i8] }>* @_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY17h78d791bf10915891E to i8*), i8* bitcast (void ()* @seahorn.fail to i8*), i8* bitcast (void (i1)* @verifier.assume to i8*), i8* bitcast (void (i1)* @verifier.assume.not to i8*), i8* bitcast (void ()* @verifier.error to i8*)], section "llvm.metadata"

; Function Attrs: nounwind nonlazybind uwtable
declare dso_local void @_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY12init_wrapper17hac2c035213cf4e54E.stub(i32, i8**, i8** nocapture readnone) unnamed_addr #0

; Function Attrs: norecurse nounwind nonlazybind readnone
declare dso_local void @rust_eh_personality.stub() unnamed_addr #1

; Function Attrs: nounwind nonlazybind
declare i32 @__VERIFIER_nondet_i32() unnamed_addr #2

; Function Attrs: inaccessiblememonly nofree norecurse nounwind
declare void @verifier.assume(i1) #3

; Function Attrs: inaccessiblememonly nofree norecurse nounwind
declare void @verifier.assume.not(i1) #3

; Function Attrs: inaccessiblememonly nofree norecurse nounwind
declare void @seahorn.fail() #3

; Function Attrs: inaccessiblememonly nofree norecurse noreturn nounwind
declare void @verifier.error() #4

; Function Attrs: inaccessiblememonly
declare void @seahorn.fn.enter() local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #6

declare { i32, i32 } @verifier.nondet.1() local_unnamed_addr

declare i32 @verifier.nondet.2() local_unnamed_addr

define i32 @main() local_unnamed_addr #7 personality void ()* @rust_eh_personality.stub {
entry:
  tail call void @seahorn.fn.enter()
  tail call void @seahorn.fn.enter() #8
  %0 = tail call { i32, i32 } @verifier.nondet.1() #8
  tail call void @seahorn.fn.enter() #8
  call void @llvm.dbg.value(metadata i32 0, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  call void @llvm.dbg.value(metadata i32 1, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 32, 32)), !dbg !82
  br label %bb2.i.i, !dbg !83

bb2.i.i:                                          ; preds = %_ZN11seahorn_for1n17ha8cf2bf3ef74d91fE.exit.i.i, %entry
  %iter.i.i.sroa.0.0 = phi i32 [ 0, %entry ], [ %iter.i.i.sroa.0.1, %_ZN11seahorn_for1n17ha8cf2bf3ef74d91fE.exit.i.i ], !dbg !84
  call void @llvm.dbg.value(metadata i32 %iter.i.i.sroa.0.0, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  %1 = tail call i32 @verifier.nondet.2() #8
  %2 = tail call { i32, i32 } @verifier.nondet.1() #8
  tail call void @seahorn.fn.enter() #8
  call void @llvm.dbg.value(metadata { i32, i32 }* undef, metadata !85, metadata !DIExpression()) #8, !dbg !114
  tail call void @seahorn.fn.enter() #8, !noalias !116
  call void @llvm.dbg.value(metadata i32* undef, metadata !120, metadata !DIExpression()) #8, !dbg !132
  call void @llvm.dbg.value(metadata i32* undef, metadata !131, metadata !DIExpression()) #8, !dbg !132
  %3 = icmp slt i32 %iter.i.i.sroa.0.0, 1, !dbg !134
  br i1 %3, label %bb3.i.i.i, label %"_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h5e9105c55bf80ceeE.exit.i.i", !dbg !135

bb3.i.i.i:                                        ; preds = %bb2.i.i
  tail call void @seahorn.fn.enter() #8, !noalias !136
  tail call void @seahorn.fn.enter() #8
  call void @llvm.dbg.value(metadata i32 %iter.i.i.sroa.0.0, metadata !139, metadata !DIExpression()) #8, !dbg !146
  call void @llvm.dbg.value(metadata i64 1, metadata !145, metadata !DIExpression()) #8, !dbg !146
  tail call void @seahorn.fn.enter() #8
  call void @llvm.dbg.value(metadata i32 %iter.i.i.sroa.0.0, metadata !148, metadata !DIExpression()) #8, !dbg !157
  call void @llvm.dbg.value(metadata i32 1, metadata !156, metadata !DIExpression()) #8, !dbg !157
  %4 = add nsw i32 %iter.i.i.sroa.0.0, 1, !dbg !159
  tail call void @seahorn.fn.enter() #8
  tail call void @seahorn.fn.enter() #8
  tail call void @seahorn.fn.enter() #8
  %5 = tail call i32 @verifier.nondet.2() #8
  tail call void @seahorn.fn.enter() #8
  tail call void @seahorn.fn.enter() #8
  tail call void @seahorn.fn.enter() #8
  call void @llvm.dbg.value(metadata i32 %4, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  tail call void @seahorn.fn.enter() #8
  br label %"_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h5e9105c55bf80ceeE.exit.i.i", !dbg !135

"_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h5e9105c55bf80ceeE.exit.i.i": ; preds = %bb3.i.i.i, %bb2.i.i
  %iter.i.i.sroa.0.1 = phi i32 [ %4, %bb3.i.i.i ], [ %iter.i.i.sroa.0.0, %bb2.i.i ], !dbg !84
  %.sroa.0.0.i.i.i = phi i1 [ false, %bb3.i.i.i ], [ true, %bb2.i.i ]
  call void @llvm.dbg.value(metadata i32 %iter.i.i.sroa.0.1, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  tail call void @seahorn.fn.enter() #8
  tail call void @seahorn.fn.enter() #8
  br i1 %.sroa.0.0.i.i.i, label %verifier.error, label %_ZN11seahorn_for1n17ha8cf2bf3ef74d91fE.exit.i.i, !dbg !160

_ZN11seahorn_for1n17ha8cf2bf3ef74d91fE.exit.i.i:  ; preds = %"_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h5e9105c55bf80ceeE.exit.i.i"
  call void @llvm.dbg.value(metadata i32 undef, metadata !69, metadata !DIExpression()) #8, !dbg !161
  call void @llvm.dbg.value(metadata i32 0, metadata !162, metadata !DIExpression()) #8, !dbg !171
  %6 = tail call i32 @__VERIFIER_nondet_i32() #8, !dbg !173
  br i1 true, label %bb2.i.i, label %fake_latch_exit, !dbg !83

verifier.error:                                   ; preds = %"_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h5e9105c55bf80ceeE.exit.i.i"
  tail call void @seahorn.fail()
  ret i32 42

fake_latch_exit:                                  ; preds = %_ZN11seahorn_for1n17ha8cf2bf3ef74d91fE.exit.i.i
  unreachable
}

attributes #0 = { nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { norecurse nounwind nonlazybind readnone "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { nounwind nonlazybind "probe-stack"="__rust_probestack" "target-cpu"="x86-64" "target-features"="-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2" }
attributes #3 = { inaccessiblememonly nofree norecurse nounwind }
attributes #4 = { inaccessiblememonly nofree norecurse noreturn nounwind }
attributes #5 = { inaccessiblememonly }
attributes #6 = { nounwind readnone speculatable willreturn }
attributes #7 = { "probe-stack"="__rust_probestack" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}
!llvm.dbg.cu = !{!7, !41, !46}

!0 = !{!"clang version 10.0.0-4ubuntu1 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!3 = !{i32 7, !"PIC Level", i32 2}
!4 = !{i32 2, !"RtLibUseGOT", i32 1}
!5 = !{i32 7, !"PIE Level", i32 2}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !8, producer: "clang LLVM (rustc version 1.46.0-dev)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !9, globals: !27)
!8 = !DIFile(filename: "src/main.rs", directory: "/home/sflur/workspace/rust-verification/rust-verification-tools/demos/bottlenecks/seahorn-for")
!9 = !{!10, !18}
!10 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Result", scope: !12, file: !11, baseType: !14, size: 8, align: 8, flags: DIFlagEnumClass, elements: !15)
!11 = !DIFile(filename: "<unknown>", directory: "")
!12 = !DINamespace(name: "result", scope: !13)
!13 = !DINamespace(name: "core", scope: null)
!14 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!15 = !{!16, !17}
!16 = !DIEnumerator(name: "Ok", value: 0)
!17 = !DIEnumerator(name: "Err", value: 1)
!18 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Alignment", scope: !19, file: !11, baseType: !14, size: 8, align: 8, flags: DIFlagEnumClass, elements: !22)
!19 = !DINamespace(name: "v1", scope: !20)
!20 = !DINamespace(name: "rt", scope: !21)
!21 = !DINamespace(name: "fmt", scope: !13)
!22 = !{!23, !24, !25, !26}
!23 = !DIEnumerator(name: "Left", value: 0)
!24 = !DIEnumerator(name: "Right", value: 1)
!25 = !DIEnumerator(name: "Center", value: 2)
!26 = !DIEnumerator(name: "Unknown", value: 3)
!27 = !{!28}
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!30 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vtable", file: !11, align: 64, flags: DIFlagArtificial, elements: !31, vtableHolder: !32, identifier: "vtable")
!31 = !{}
!32 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "closure-0", scope: !33, file: !11, size: 64, align: 64, elements: !36, templateParams: !31, identifier: "794549e730505e17d94582117f8b3d60")
!33 = !DINamespace(name: "lang_start", scope: !34)
!34 = !DINamespace(name: "rt", scope: !35)
!35 = !DINamespace(name: "std", scope: null)
!36 = !{!37}
!37 = !DIDerivedType(tag: DW_TAG_member, name: "__0", scope: !32, file: !11, baseType: !38, size: 64, align: 64)
!38 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "fn()", baseType: !39, size: 64, align: 64, dwarfAddressSpace: 0)
!39 = !DISubroutineType(types: !40)
!40 = !{null}
!41 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !42, producer: "clang LLVM (rustc version 1.46.0-dev)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !9, globals: !43)
!42 = !DIFile(filename: "/home/rust-verification-tools/propverify/src/lib.rs", directory: "/home/rust-verification-tools/propverify")
!43 = !{!44}
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!46 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !47, producer: "clang LLVM (rustc version 1.46.0-dev)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !48, globals: !54)
!47 = !DIFile(filename: "/home/rust-verification-tools/verification-annotations/src/lib.rs", directory: "/home/rust-verification-tools/verification-annotations")
!48 = !{!10, !18, !49}
!49 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AllocInit", scope: !50, file: !11, baseType: !14, size: 8, align: 8, flags: DIFlagEnumClass, elements: !51)
!50 = !DINamespace(name: "alloc", scope: !13)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Uninitialized", value: 0)
!53 = !DIEnumerator(name: "Zeroed", value: 1)
!54 = !{!55, !57, !59, !61}
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!59 = !DIGlobalVariableExpression(var: !60, expr: !DIExpression())
!60 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!63 = !DILocalVariable(name: "iter", scope: !64, file: !65, line: 5, type: !74, align: 4)
!64 = distinct !DILexicalBlock(scope: !66, file: !65, line: 5, column: 5)
!65 = !DIFile(filename: "src/main.rs", directory: "/home/sflur/workspace/rust-verification/rust-verification-tools/demos/bottlenecks/seahorn-for", checksumkind: CSK_MD5, checksum: "adbf4ebfe93589a174c10558f02ccb72")
!66 = distinct !DISubprogram(name: "test", linkageName: "_ZN11seahorn_for4test17he738694bf5f4429fE", scope: !67, file: !65, line: 4, type: !39, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, templateParams: !31, retainedNodes: !68)
!67 = !DINamespace(name: "seahorn_for", scope: null)
!68 = !{!63, !69, !72}
!69 = !DILocalVariable(name: "__next", scope: !70, file: !65, line: 5, type: !71, align: 4)
!70 = distinct !DILexicalBlock(scope: !64, file: !65, line: 5, column: 14)
!71 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!72 = !DILocalVariable(name: "val", scope: !73, file: !65, line: 5, type: !71, align: 4)
!73 = distinct !DILexicalBlock(scope: !70, file: !65, line: 5, column: 9)
!74 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Range<i32>", scope: !75, file: !11, size: 64, align: 32, elements: !77, templateParams: !80, identifier: "4b98ab9dcc3f58447dd0508b9a4342bf")
!75 = !DINamespace(name: "range", scope: !76)
!76 = !DINamespace(name: "ops", scope: !13)
!77 = !{!78, !79}
!78 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !74, file: !11, baseType: !71, size: 32, align: 32)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !74, file: !11, baseType: !71, size: 32, align: 32, offset: 32)
!80 = !{!81}
!81 = !DITemplateTypeParameter(name: "Idx", type: !71)
!82 = !DILocation(line: 0, scope: !64)
!83 = !DILocation(line: 5, column: 5, scope: !64)
!84 = !DILocation(line: 0, scope: !66)
!85 = !DILocalVariable(name: "self", arg: 1, scope: !86, file: !87, line: 504, type: !108)
!86 = distinct !DISubprogram(name: "next<i32>", linkageName: "_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h5e9105c55bf80ceeE", scope: !88, file: !87, line: 504, type: !91, scopeLine: 504, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, templateParams: !112, retainedNodes: !109)
!87 = !DIFile(filename: "/home/sflur/rust/src/libcore/iter/range.rs", directory: "", checksumkind: CSK_MD5, checksum: "f54a7b8e68d1fef6127b42e736393809")
!88 = !DINamespace(name: "{{impl}}", scope: !89)
!89 = !DINamespace(name: "range", scope: !90)
!90 = !DINamespace(name: "iter", scope: !13)
!91 = !DISubroutineType(types: !92)
!92 = !{!93, !108}
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Option<i32>", scope: !94, file: !11, size: 64, align: 32, elements: !95, identifier: "22866a387161564b492aad3624b55695")
!94 = !DINamespace(name: "option", scope: !13)
!95 = !{!96}
!96 = distinct !DICompositeType(tag: DW_TAG_variant_part, scope: !94, file: !11, size: 64, align: 32, elements: !97, templateParams: !100, identifier: "22866a387161564b492aad3624b55695_variant_part", discriminator: !106)
!97 = !{!98, !102}
!98 = !DIDerivedType(tag: DW_TAG_member, name: "None", scope: !96, file: !11, baseType: !99, size: 64, align: 32, extraData: i64 0)
!99 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "None", scope: !93, file: !11, size: 64, align: 32, elements: !31, templateParams: !100, identifier: "22866a387161564b492aad3624b55695::None")
!100 = !{!101}
!101 = !DITemplateTypeParameter(name: "T", type: !71)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "Some", scope: !96, file: !11, baseType: !103, size: 64, align: 32, extraData: i64 1)
!103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Some", scope: !93, file: !11, size: 64, align: 32, elements: !104, templateParams: !100, identifier: "22866a387161564b492aad3624b55695::Some")
!104 = !{!105}
!105 = !DIDerivedType(tag: DW_TAG_member, name: "__0", scope: !103, file: !11, baseType: !71, size: 32, align: 32, offset: 32)
!106 = !DIDerivedType(tag: DW_TAG_member, scope: !94, file: !11, baseType: !107, size: 32, align: 32, flags: DIFlagArtificial)
!107 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!108 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "&mut core::ops::range::Range<i32>", baseType: !74, size: 64, align: 64, dwarfAddressSpace: 0)
!109 = !{!85, !110}
!110 = !DILocalVariable(name: "n", scope: !111, file: !87, line: 507, type: !71, align: 4)
!111 = distinct !DILexicalBlock(scope: !86, file: !87, line: 507, column: 13)
!112 = !{!113}
!113 = !DITemplateTypeParameter(name: "A", type: !71)
!114 = !DILocation(line: 0, scope: !86, inlinedAt: !115)
!115 = distinct !DILocation(line: 5, column: 14, scope: !70)
!116 = !{!117, !119}
!117 = distinct !{!117, !118, !"_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E: %self"}
!118 = distinct !{!118, !"_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E"}
!119 = distinct !{!119, !118, !"_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E: %other"}
!120 = !DILocalVariable(name: "self", arg: 1, scope: !121, file: !122, line: 1136, type: !129)
!121 = distinct !DISubprogram(name: "lt", linkageName: "_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E", scope: !123, file: !122, line: 1136, type: !126, scopeLine: 1136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, templateParams: !31, retainedNodes: !130)
!122 = !DIFile(filename: "/home/sflur/rust/src/libcore/cmp.rs", directory: "", checksumkind: CSK_MD5, checksum: "edbdeae457543071a1989a77b61d8881")
!123 = !DINamespace(name: "{{impl}}", scope: !124)
!124 = !DINamespace(name: "impls", scope: !125)
!125 = !DINamespace(name: "cmp", scope: !13)
!126 = !DISubroutineType(types: !127)
!127 = !{!128, !129, !129}
!128 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "&i32", baseType: !71, size: 64, align: 64, dwarfAddressSpace: 0)
!130 = !{!120, !131}
!131 = !DILocalVariable(name: "other", arg: 2, scope: !121, file: !122, line: 1136, type: !129)
!132 = !DILocation(line: 0, scope: !121, inlinedAt: !133)
!133 = distinct !DILocation(line: 505, column: 12, scope: !86, inlinedAt: !115)
!134 = !DILocation(line: 1136, column: 52, scope: !121, inlinedAt: !133)
!135 = !DILocation(line: 505, column: 9, scope: !86, inlinedAt: !115)
!136 = !{!137}
!137 = distinct !{!137, !138, !"_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i32$GT$5clone17hb1e3f4bc890d7bd2E: %self"}
!138 = distinct !{!138, !"_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i32$GT$5clone17hb1e3f4bc890d7bd2E"}
!139 = !DILocalVariable(name: "start", arg: 1, scope: !140, file: !87, line: 191, type: !71)
!140 = distinct !DISubprogram(name: "forward_unchecked", linkageName: "_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h50635a852dbdbcffE", scope: !88, file: !87, line: 191, type: !141, scopeLine: 191, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, templateParams: !31, retainedNodes: !144)
!141 = !DISubroutineType(types: !142)
!142 = !{!71, !71, !143}
!143 = !DIBasicType(name: "usize", size: 64, encoding: DW_ATE_unsigned)
!144 = !{!139, !145}
!145 = !DILocalVariable(name: "n", arg: 2, scope: !140, file: !87, line: 191, type: !143)
!146 = !DILocation(line: 0, scope: !140, inlinedAt: !147)
!147 = distinct !DILocation(line: 507, column: 30, scope: !86, inlinedAt: !115)
!148 = !DILocalVariable(name: "self", arg: 1, scope: !149, file: !150, line: 780, type: !71)
!149 = distinct !DISubprogram(name: "unchecked_add", linkageName: "_ZN4core3num21_$LT$impl$u20$i32$GT$13unchecked_add17h381ad3c68f040fa1E", scope: !151, file: !150, line: 780, type: !153, scopeLine: 780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, templateParams: !31, retainedNodes: !155)
!150 = !DIFile(filename: "/home/sflur/rust/src/libcore/num/mod.rs", directory: "", checksumkind: CSK_MD5, checksum: "b610d63e687c1bb61890b7290628f313")
!151 = !DINamespace(name: "{{impl}}", scope: !152)
!152 = !DINamespace(name: "num", scope: !13)
!153 = !DISubroutineType(types: !154)
!154 = !{!71, !71, !71}
!155 = !{!148, !156}
!156 = !DILocalVariable(name: "rhs", arg: 2, scope: !149, file: !150, line: 780, type: !71)
!157 = !DILocation(line: 0, scope: !149, inlinedAt: !158)
!158 = distinct !DILocation(line: 193, column: 22, scope: !140, inlinedAt: !147)
!159 = !DILocation(line: 783, column: 26, scope: !149, inlinedAt: !158)
!160 = !DILocation(line: 5, column: 9, scope: !70)
!161 = !DILocation(line: 0, scope: !70)
!162 = !DILocalVariable(name: "self", arg: 1, scope: !163, file: !164, line: 94, type: !71)
!163 = distinct !DISubprogram(name: "verifier_nondet", linkageName: "_ZN24verification_annotations7seahorn82_$LT$impl$u20$verification_annotations..traits..VerifierNonDet$u20$for$u20$i32$GT$15verifier_nondet17h010765752bc12325E", scope: !165, file: !164, line: 94, type: !168, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !46, templateParams: !31, retainedNodes: !170)
!164 = !DIFile(filename: "/home/rust-verification-tools/verification-annotations/src/seahorn.rs", directory: "/home/rust-verification-tools/verification-annotations", checksumkind: CSK_MD5, checksum: "eb28ee15fe42acc8bb7e1b95034b024a")
!165 = !DINamespace(name: "{{impl}}", scope: !166)
!166 = !DINamespace(name: "seahorn", scope: !167)
!167 = !DINamespace(name: "verification_annotations", scope: null)
!168 = !DISubroutineType(types: !169)
!169 = !{!71, !71}
!170 = !{!162}
!171 = !DILocation(line: 0, scope: !163, inlinedAt: !172)
!172 = distinct !DILocation(line: 7, column: 9, scope: !70)
!173 = !DILocation(line: 95, column: 26, scope: !163, inlinedAt: !172)

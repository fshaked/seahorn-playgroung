; ModuleID = 'seaout/test/seahorn_for-8bd2de6ce9e43ffb.link.patch-sea.pp.ms.o.ul.cut.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY17h78d791bf10915891E = internal constant <{ i8*, [0 x i8] }> <{ i8* bitcast (void (i32, i8**, i8**)* @_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY12init_wrapper17hac2c035213cf4e54E.stub to i8*), [0 x i8] zeroinitializer }>, section ".init_array.00099", align 8
@llvm.used = appending global [5 x i8*] [i8* bitcast (<{ i8*, [0 x i8] }>* @_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY17h78d791bf10915891E to i8*), i8* bitcast (void ()* @seahorn.fail to i8*), i8* bitcast (void (i1)* @verifier.assume to i8*), i8* bitcast (void (i1)* @verifier.assume.not to i8*), i8* bitcast (void ()* @verifier.error to i8*)], section "llvm.metadata"

; Function Attrs: nounwind nonlazybind uwtable
declare dso_local void @_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY12init_wrapper17hac2c035213cf4e54E.stub(i32, i8**, i8** nocapture readnone) unnamed_addr #0

; Function Attrs: norecurse nounwind nonlazybind readnone
declare dso_local void @rust_eh_personality.stub() unnamed_addr #1

; Function Attrs: inaccessiblememonly nofree norecurse nounwind
declare void @verifier.assume(i1) #2

; Function Attrs: inaccessiblememonly nofree norecurse nounwind
declare void @verifier.assume.not(i1) #2

; Function Attrs: inaccessiblememonly nofree norecurse nounwind
declare void @seahorn.fail() #2

; Function Attrs: inaccessiblememonly nofree norecurse noreturn nounwind
declare void @verifier.error() #3

; Function Attrs: inaccessiblememonly
declare void @seahorn.fn.enter() local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #5

declare { i32, i32 } @verifier.nondet.1() local_unnamed_addr

declare i32 @verifier.nondet.2() local_unnamed_addr

define i32 @main() local_unnamed_addr #6 personality void ()* @rust_eh_personality.stub {
entry:
  tail call void @seahorn.fn.enter()
  tail call void @seahorn.fn.enter() #7
  %0 = tail call { i32, i32 } @verifier.nondet.1() #7
  tail call void @seahorn.fn.enter() #7
  call void @llvm.dbg.value(metadata i32 1, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 32, 32)), !dbg !82
  call void @llvm.dbg.value(metadata i32 0, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  %1 = tail call i32 @verifier.nondet.2() #7
  %2 = tail call { i32, i32 } @verifier.nondet.1() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7, !noalias !83
  tail call void @seahorn.fn.enter() #7, !noalias !87
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  %3 = tail call i32 @verifier.nondet.2() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  call void @llvm.dbg.value(metadata i32 1, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  tail call void @seahorn.fn.enter() #7
  call void @llvm.dbg.value(metadata i32 undef, metadata !63, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 32)), !dbg !82
  tail call void @seahorn.fn.enter() #7
  tail call void @seahorn.fn.enter() #7
  tail call void @verifier.assume(i1 false), !dbg !90
  tail call void @seahorn.fail()
  ret i32 42
}

attributes #0 = { nounwind nonlazybind uwtable "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #1 = { norecurse nounwind nonlazybind readnone "probe-stack"="__rust_probestack" "target-cpu"="x86-64" }
attributes #2 = { inaccessiblememonly nofree norecurse nounwind }
attributes #3 = { inaccessiblememonly nofree norecurse noreturn nounwind }
attributes #4 = { inaccessiblememonly }
attributes #5 = { nounwind readnone speculatable willreturn }
attributes #6 = { "probe-stack"="__rust_probestack" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}
!llvm.dbg.cu = !{!7, !41, !46}

!0 = !{!"clang version 10.0.0-4ubuntu1 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!3 = !{i32 7, !"PIC Level", i32 2}
!4 = !{i32 2, !"RtLibUseGOT", i32 1}
!5 = !{i32 7, !"PIE Level", i32 2}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !8, producer: "clang LLVM (rustc version 1.46.0-dev)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !9, globals: !27)
!8 = !DIFile(filename: "src/main.rs", directory: "/home/sflur/workspace/rust-verification/rust-verification-tools/demos/bottlenecks/seahorn-for")
!9 = !{!10, !18}
!10 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Result", scope: !12, file: !11, baseType: !14, size: 8, align: 8, flags: DIFlagEnumClass, elements: !15)
!11 = !DIFile(filename: "<unknown>", directory: "")
!12 = !DINamespace(name: "result", scope: !13)
!13 = !DINamespace(name: "core", scope: null)
!14 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!15 = !{!16, !17}
!16 = !DIEnumerator(name: "Ok", value: 0)
!17 = !DIEnumerator(name: "Err", value: 1)
!18 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Alignment", scope: !19, file: !11, baseType: !14, size: 8, align: 8, flags: DIFlagEnumClass, elements: !22)
!19 = !DINamespace(name: "v1", scope: !20)
!20 = !DINamespace(name: "rt", scope: !21)
!21 = !DINamespace(name: "fmt", scope: !13)
!22 = !{!23, !24, !25, !26}
!23 = !DIEnumerator(name: "Left", value: 0)
!24 = !DIEnumerator(name: "Right", value: 1)
!25 = !DIEnumerator(name: "Center", value: 2)
!26 = !DIEnumerator(name: "Unknown", value: 3)
!27 = !{!28}
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!30 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vtable", file: !11, align: 64, flags: DIFlagArtificial, elements: !31, vtableHolder: !32, identifier: "vtable")
!31 = !{}
!32 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "closure-0", scope: !33, file: !11, size: 64, align: 64, elements: !36, templateParams: !31, identifier: "794549e730505e17d94582117f8b3d60")
!33 = !DINamespace(name: "lang_start", scope: !34)
!34 = !DINamespace(name: "rt", scope: !35)
!35 = !DINamespace(name: "std", scope: null)
!36 = !{!37}
!37 = !DIDerivedType(tag: DW_TAG_member, name: "__0", scope: !32, file: !11, baseType: !38, size: 64, align: 64)
!38 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "fn()", baseType: !39, size: 64, align: 64, dwarfAddressSpace: 0)
!39 = !DISubroutineType(types: !40)
!40 = !{null}
!41 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !42, producer: "clang LLVM (rustc version 1.46.0-dev)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !9, globals: !43)
!42 = !DIFile(filename: "/home/rust-verification-tools/propverify/src/lib.rs", directory: "/home/rust-verification-tools/propverify")
!43 = !{!44}
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!46 = distinct !DICompileUnit(language: DW_LANG_Rust, file: !47, producer: "clang LLVM (rustc version 1.46.0-dev)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !48, globals: !54)
!47 = !DIFile(filename: "/home/rust-verification-tools/verification-annotations/src/lib.rs", directory: "/home/rust-verification-tools/verification-annotations")
!48 = !{!10, !18, !49}
!49 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AllocInit", scope: !50, file: !11, baseType: !14, size: 8, align: 8, flags: DIFlagEnumClass, elements: !51)
!50 = !DINamespace(name: "alloc", scope: !13)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Uninitialized", value: 0)
!53 = !DIEnumerator(name: "Zeroed", value: 1)
!54 = !{!55, !57, !59, !61}
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!59 = !DIGlobalVariableExpression(var: !60, expr: !DIExpression())
!60 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "vtable", scope: null, file: !11, type: !30, isLocal: true, isDefinition: true)
!63 = !DILocalVariable(name: "iter", scope: !64, file: !65, line: 5, type: !74, align: 4)
!64 = distinct !DILexicalBlock(scope: !66, file: !65, line: 5, column: 5)
!65 = !DIFile(filename: "src/main.rs", directory: "/home/sflur/workspace/rust-verification/rust-verification-tools/demos/bottlenecks/seahorn-for", checksumkind: CSK_MD5, checksum: "adbf4ebfe93589a174c10558f02ccb72")
!66 = distinct !DISubprogram(name: "test", linkageName: "_ZN11seahorn_for4test17he738694bf5f4429fE", scope: !67, file: !65, line: 4, type: !39, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7, templateParams: !31, retainedNodes: !68)
!67 = !DINamespace(name: "seahorn_for", scope: null)
!68 = !{!63, !69, !72}
!69 = !DILocalVariable(name: "__next", scope: !70, file: !65, line: 5, type: !71, align: 4)
!70 = distinct !DILexicalBlock(scope: !64, file: !65, line: 5, column: 14)
!71 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!72 = !DILocalVariable(name: "val", scope: !73, file: !65, line: 5, type: !71, align: 4)
!73 = distinct !DILexicalBlock(scope: !70, file: !65, line: 5, column: 9)
!74 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Range<i32>", scope: !75, file: !11, size: 64, align: 32, elements: !77, templateParams: !80, identifier: "4b98ab9dcc3f58447dd0508b9a4342bf")
!75 = !DINamespace(name: "range", scope: !76)
!76 = !DINamespace(name: "ops", scope: !13)
!77 = !{!78, !79}
!78 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !74, file: !11, baseType: !71, size: 32, align: 32)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !74, file: !11, baseType: !71, size: 32, align: 32, offset: 32)
!80 = !{!81}
!81 = !DITemplateTypeParameter(name: "Idx", type: !71)
!82 = !DILocation(line: 0, scope: !64)
!83 = !{!84, !86}
!84 = distinct !{!84, !85, !"_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E: %self"}
!85 = distinct !{!85, !"_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E"}
!86 = distinct !{!86, !85, !"_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$i32$GT$2lt17h1a280bfba5b373e6E: %other"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i32$GT$5clone17hb1e3f4bc890d7bd2E: %self"}
!89 = distinct !{!89, !"_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i32$GT$5clone17hb1e3f4bc890d7bd2E"}
!90 = !DILocation(line: 5, column: 9, scope: !70)
